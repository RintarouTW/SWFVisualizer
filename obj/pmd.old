<?xml version="1.0" encoding="UTF-8"?>
<pmd version="4.2.1" timestamp="Sat Jun 19 17:55:45 CST 2010">
   <file name="C:/Users/Rintarou/Documents/SWFTest/src/Anchor.as">
      <violation beginline="12" endline="12" begincolumn="44" endcolumn="44" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="All Flex Rules" package="" class="Anchor.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="16" endline="16" begincolumn="0" endcolumn="72" rule="adobe.ac.pmd.rules.event.ListenForHardCodedEventName" ruleset="All Flex Rules" package="" class="Anchor.as" externalInfoUrl="" priority="1">addEventListener must not contain hard coded strings. You should not listen for a plain string. If you rename this string, you need to replace the string listener as well. Use constants instead</violation>
      <violation beginline="17" endline="17" begincolumn="0" endcolumn="66" rule="adobe.ac.pmd.rules.event.ListenForHardCodedEventName" ruleset="All Flex Rules" package="" class="Anchor.as" externalInfoUrl="" priority="1">addEventListener must not contain hard coded strings. You should not listen for a plain string. If you rename this string, you need to replace the string listener as well. Use constants instead</violation>
      <violation beginline="18" endline="18" begincolumn="0" endcolumn="66" rule="adobe.ac.pmd.rules.event.ListenForHardCodedEventName" ruleset="All Flex Rules" package="" class="Anchor.as" externalInfoUrl="" priority="1">addEventListener must not contain hard coded strings. You should not listen for a plain string. If you rename this string, you need to replace the string listener as well. Use constants instead</violation>
      <violation beginline="5" endline="5" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.asdocs.ClassAsDocMissing" ruleset="All Flex Rules" package="" class="Anchor.as" externalInfoUrl="" priority="3">This class ({0}) should be documented with AsDocs.. </violation>
   </file>
   <file name="C:/Users/Rintarou/Documents/SWFTest/src/Application.as">
      <violation beginline="16" endline="16" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.asdocs.ClassAsDocMissing" ruleset="All Flex Rules" package="" class="Application.as" externalInfoUrl="" priority="3">This class ({0}) should be documented with AsDocs.. </violation>
      <violation beginline="16" endline="16" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.sizing.TooManyFields" ruleset="All Flex Rules" package="" class="Application.as" externalInfoUrl="" priority="3">Too many field detected (5 maximum, but 6 actually). Classes that have too many fields could be redesigned to have fewer fields, possibly  through some nested object grouping of some of the information.  For example, a class with  city/state/zipcode fields could instead have one Address field</violation>
      <violation beginline="26" endline="26" begincolumn="19" endcolumn="19" rule="adobe.ac.pmd.rules.sizing.TooLongFunction" ruleset="All Flex Rules" package="" class="Application.as" externalInfoUrl="" priority="3">This function is far too long (20 maximum, but 38 actually). Violations of this rule usually indicate that the method has too much responsibility. Try to reduce the method size by creating helper methods and removing any copy/pasted code</violation>
   </file>
   <file name="C:/Users/Rintarou/Documents/SWFTest/src/Cell.as">
      <violation beginline="17" endline="17" begincolumn="34" endcolumn="34" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="All Flex Rules" package="" class="Cell.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="58" endline="58" begincolumn="20" endcolumn="20" rule="adobe.ac.pmd.rules.unused.EmptyPrivateMethod" ruleset="All Flex Rules" package="" class="Cell.as" externalInfoUrl="" priority="1">This private method (mOut) is used but its content is empty. </violation>
      <violation beginline="104" endline="104" begincolumn="37" endcolumn="37" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="All Flex Rules" package="" class="Cell.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="108" endline="108" begincolumn="36" endcolumn="36" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="All Flex Rules" package="" class="Cell.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="7" endline="7" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.asdocs.ClassAsDocMissing" ruleset="All Flex Rules" package="" class="Cell.as" externalInfoUrl="" priority="3">This class ({0}) should be documented with AsDocs.. </violation>
      <violation beginline="7" endline="7" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.sizing.TooManyFields" ruleset="All Flex Rules" package="" class="Cell.as" externalInfoUrl="" priority="3">Too many field detected (5 maximum, but 6 actually). Classes that have too many fields could be redesigned to have fewer fields, possibly  through some nested object grouping of some of the information.  For example, a class with  city/state/zipcode fields could instead have one Address field</violation>
      <violation beginline="17" endline="17" begincolumn="12" endcolumn="12" rule="adobe.ac.pmd.rules.performance.HeavyConstructor" ruleset="All Flex Rules" package="" class="Cell.as" externalInfoUrl="" priority="3">Constructor must be as lightweight as possible. No control statement allowed, whereas a cyclomatic complexe of 6 has been detected. The Just-In-Time compiler does not compile constructors. Make them as lightweight as possible, or move the complexity of the code to a method called by the constructor. Then the complexity will be compiled by the JIT</violation>
      <violation beginline="17" endline="17" begincolumn="12" endcolumn="12" rule="adobe.ac.pmd.rules.sizing.TooLongFunction" ruleset="All Flex Rules" package="" class="Cell.as" externalInfoUrl="" priority="3">This function is far too long (20 maximum, but 22 actually). Violations of this rule usually indicate that the method has too much responsibility. Try to reduce the method size by creating helper methods and removing any copy/pasted code</violation>
   </file>
   <file name="C:/Users/Rintarou/Documents/SWFTest/src/ConnPath.as">
      <violation beginline="43" endline="43" begincolumn="20" endcolumn="20" rule="adobe.ac.pmd.rules.unused.UnusedPrivateMethod" ruleset="All Flex Rules" package="" class="ConnPath.as" externalInfoUrl="" priority="1">This private method (anchor1Click) does not seem to be used. </violation>
      <violation beginline="56" endline="56" begincolumn="20" endcolumn="20" rule="adobe.ac.pmd.rules.unused.UnusedPrivateMethod" ruleset="All Flex Rules" package="" class="ConnPath.as" externalInfoUrl="" priority="1">This private method (mOver) does not seem to be used. </violation>
      <violation beginline="61" endline="61" begincolumn="20" endcolumn="20" rule="adobe.ac.pmd.rules.unused.UnusedPrivateMethod" ruleset="All Flex Rules" package="" class="ConnPath.as" externalInfoUrl="" priority="1">This private method (mOut) does not seem to be used. </violation>
      <violation beginline="66" endline="66" begincolumn="20" endcolumn="20" rule="adobe.ac.pmd.rules.unused.UnusedPrivateMethod" ruleset="All Flex Rules" package="" class="ConnPath.as" externalInfoUrl="" priority="1">This private method (mClick) does not seem to be used. </violation>
      <violation beginline="9" endline="9" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.asdocs.ClassAsDocMissing" ruleset="All Flex Rules" package="" class="ConnPath.as" externalInfoUrl="" priority="3">This class ({0}) should be documented with AsDocs.. </violation>
      <violation beginline="11" endline="11" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.naming.VariableNameEndingWithNumeric" ruleset="All Flex Rules" package="" class="ConnPath.as" externalInfoUrl="" priority="3">Using digits at the end of a symbol does not help understanging the meaning of it. (anchor2). </violation>
      <violation beginline="16" endline="16" begincolumn="22" endcolumn="22" rule="adobe.ac.pmd.rules.naming.VariableNameEndingWithNumeric" ruleset="All Flex Rules" package="" class="ConnPath.as" externalInfoUrl="" priority="3">Using digits at the end of a symbol does not help understanging the meaning of it. (a1). </violation>
      <violation beginline="16" endline="16" begincolumn="33" endcolumn="33" rule="adobe.ac.pmd.rules.naming.VariableNameEndingWithNumeric" ruleset="All Flex Rules" package="" class="ConnPath.as" externalInfoUrl="" priority="3">Using digits at the end of a symbol does not help understanging the meaning of it. (a2). </violation>
      <violation beginline="16" endline="16" begincolumn="12" endcolumn="12" rule="adobe.ac.pmd.rules.performance.HeavyConstructor" ruleset="All Flex Rules" package="" class="ConnPath.as" externalInfoUrl="" priority="3">Constructor must be as lightweight as possible. No control statement allowed, whereas a cyclomatic complexe of 3 has been detected. The Just-In-Time compiler does not compile constructors. Make them as lightweight as possible, or move the complexity of the code to a method called by the constructor. Then the complexity will be compiled by the JIT</violation>
   </file>
   <file name="C:/Users/Rintarou/Documents/SWFTest/src/HelpMenu.as">
      <violation beginline="11" endline="11" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.asdocs.ClassAsDocMissing" ruleset="All Flex Rules" package="" class="HelpMenu.as" externalInfoUrl="" priority="3">This class ({0}) should be documented with AsDocs.. </violation>
      <violation beginline="11" endline="11" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.sizing.TooManyFields" ruleset="All Flex Rules" package="" class="HelpMenu.as" externalInfoUrl="" priority="3">Too many field detected (5 maximum, but 6 actually). Classes that have too many fields could be redesigned to have fewer fields, possibly  through some nested object grouping of some of the information.  For example, a class with  city/state/zipcode fields could instead have one Address field</violation>
      <violation beginline="19" endline="19" begincolumn="3" endcolumn="3" rule="adobe.ac.pmd.rules.css.UseCssInsteadOfEmbedMetaData" ruleset="All Flex Rules" package="" class="HelpMenu.as" externalInfoUrl="" priority="3">Embed metadata detected in source code where a stylesheet may be cleaner. </violation>
      <violation beginline="22" endline="22" begincolumn="3" endcolumn="3" rule="adobe.ac.pmd.rules.css.UseCssInsteadOfEmbedMetaData" ruleset="All Flex Rules" package="" class="HelpMenu.as" externalInfoUrl="" priority="3">Embed metadata detected in source code where a stylesheet may be cleaner. </violation>
      <violation beginline="35" endline="35" begincolumn="20" endcolumn="20" rule="adobe.ac.pmd.rules.sizing.TooLongFunction" ruleset="All Flex Rules" package="" class="HelpMenu.as" externalInfoUrl="" priority="3">This function is far too long (20 maximum, but 45 actually). Violations of this rule usually indicate that the method has too much responsibility. Try to reduce the method size by creating helper methods and removing any copy/pasted code</violation>
   </file>
   <file name="C:/Users/Rintarou/Documents/SWFTest/src/LayoutContainer.as">
      <violation beginline="6" endline="6" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.asdocs.ClassAsDocMissing" ruleset="All Flex Rules" package="" class="LayoutContainer.as" externalInfoUrl="" priority="3">This class ({0}) should be documented with AsDocs.. </violation>
      <violation beginline="36" endline="36" begincolumn="27" endcolumn="27" rule="adobe.ac.pmd.rules.naming.VariableNameEndingWithNumeric" ruleset="All Flex Rules" package="" class="LayoutContainer.as" externalInfoUrl="" priority="3">Using digits at the end of a symbol does not help understanging the meaning of it. (p1). </violation>
      <violation beginline="36" endline="36" begincolumn="38" endcolumn="38" rule="adobe.ac.pmd.rules.naming.VariableNameEndingWithNumeric" ruleset="All Flex Rules" package="" class="LayoutContainer.as" externalInfoUrl="" priority="3">Using digits at the end of a symbol does not help understanging the meaning of it. (p2). </violation>
   </file>
   <file name="C:/Users/Rintarou/Documents/SWFTest/src/SWFViewer.as">
      <violation beginline="10" endline="10" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="All Flex Rules" package="" class="SWFViewer.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="11" endline="11" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="All Flex Rules" package="" class="SWFViewer.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="49" endline="49" begincolumn="10" endcolumn="10" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="All Flex Rules" package="" class="SWFViewer.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="58" endline="58" begincolumn="29" endcolumn="29" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="All Flex Rules" package="" class="SWFViewer.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="110" endline="110" begincolumn="17" endcolumn="17" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseGenericType" ruleset="All Flex Rules" package="" class="SWFViewer.as" externalInfoUrl="" priority="1">Use strongly typed objects instead of *. </violation>
      <violation beginline="7" endline="7" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.asdocs.ClassAsDocMissing" ruleset="All Flex Rules" package="" class="SWFViewer.as" externalInfoUrl="" priority="3">This class ({0}) should be documented with AsDocs.. </violation>
      <violation beginline="58" endline="58" begincolumn="20" endcolumn="20" rule="adobe.ac.pmd.rules.performance.CyclomaticComplexity" ruleset="All Flex Rules" package="" class="SWFViewer.as" externalInfoUrl="" priority="3">This method is too complex. Maximum complexity is 15, but its cyclomatic complexity was 17. </violation>
      <violation beginline="58" endline="58" begincolumn="20" endcolumn="20" rule="adobe.ac.pmd.rules.sizing.TooLongFunction" ruleset="All Flex Rules" package="" class="SWFViewer.as" externalInfoUrl="" priority="3">This function is far too long (20 maximum, but 36 actually). Violations of this rule usually indicate that the method has too much responsibility. Try to reduce the method size by creating helper methods and removing any copy/pasted code</violation>
      <violation beginline="104" endline="104" begincolumn="10" endcolumn="10" rule="adobe.ac.pmd.rules.naming.VariableNameEndingWithNumeric" ruleset="All Flex Rules" package="" class="SWFViewer.as" externalInfoUrl="" priority="3">Using digits at the end of a symbol does not help understanging the meaning of it. (anchor1). </violation>
      <violation beginline="112" endline="112" begincolumn="11" endcolumn="11" rule="adobe.ac.pmd.rules.performance.DeeplyNestedIf" ruleset="All Flex Rules" package="" class="SWFViewer.as" externalInfoUrl="" priority="3">Nested if statements are not a good design. </violation>
      <violation beginline="114" endline="114" begincolumn="12" endcolumn="12" rule="adobe.ac.pmd.rules.performance.DeeplyNestedIf" ruleset="All Flex Rules" package="" class="SWFViewer.as" externalInfoUrl="" priority="3">Nested if statements are not a good design. </violation>
      <violation beginline="122" endline="122" begincolumn="23" endcolumn="23" rule="adobe.ac.pmd.rules.performance.AvoidInstanciationInLoop" ruleset="All Flex Rules" package="" class="SWFViewer.as" externalInfoUrl="" priority="3">Instanciating a variable in a loop can be expensive. </violation>
      <violation beginline="123" endline="123" begincolumn="23" endcolumn="23" rule="adobe.ac.pmd.rules.performance.AvoidInstanciationInLoop" ruleset="All Flex Rules" package="" class="SWFViewer.as" externalInfoUrl="" priority="3">Instanciating a variable in a loop can be expensive. </violation>
      <violation beginline="141" endline="141" begincolumn="21" endcolumn="21" rule="adobe.ac.pmd.rules.performance.AvoidInstanciationInLoop" ruleset="All Flex Rules" package="" class="SWFViewer.as" externalInfoUrl="" priority="3">Instanciating a variable in a loop can be expensive. </violation>
      <violation beginline="142" endline="142" begincolumn="21" endcolumn="21" rule="adobe.ac.pmd.rules.performance.AvoidInstanciationInLoop" ruleset="All Flex Rules" package="" class="SWFViewer.as" externalInfoUrl="" priority="3">Instanciating a variable in a loop can be expensive. </violation>
   </file>
   <file name="C:/Users/Rintarou/Documents/SWFTest/src/SWFVisualizer.as">
      <violation beginline="28" endline="28" begincolumn="0" endcolumn="49" rule="adobe.ac.pmd.rules.event.ListenForHardCodedEventName" ruleset="All Flex Rules" package="" class="SWFVisualizer.as" externalInfoUrl="" priority="1">addEventListener must not contain hard coded strings. You should not listen for a plain string. If you rename this string, you need to replace the string listener as well. Use constants instead</violation>
      <violation beginline="41" endline="41" begincolumn="8" endcolumn="8" rule="adobe.ac.pmd.rules.unused.UnusedLocalVariable" ruleset="All Flex Rules" package="" class="SWFVisualizer.as" externalInfoUrl="" priority="1">This variable (_mwSupport) is not used. </violation>
      <violation beginline="12" endline="12" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.asdocs.ClassAsDocMissing" ruleset="All Flex Rules" package="" class="SWFVisualizer.as" externalInfoUrl="" priority="3">This class ({0}) should be documented with AsDocs.. </violation>
   </file>
   <file name="C:/Users/Rintarou/Documents/SWFTest/src/Table.as">
      <violation beginline="20" endline="20" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.unused.UnusedField" ruleset="All Flex Rules" package="" class="Table.as" externalInfoUrl="" priority="1">This private attribute (myDepth) does not seem to be used. </violation>
      <violation beginline="22" endline="22" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.unused.UnusedField" ruleset="All Flex Rules" package="" class="Table.as" externalInfoUrl="" priority="1">This private attribute (isTweening) does not seem to be used. </violation>
      <violation beginline="30" endline="30" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="All Flex Rules" package="" class="Table.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="34" endline="34" begincolumn="35" endcolumn="35" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="All Flex Rules" package="" class="Table.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="79" endline="79" begincolumn="27" endcolumn="27" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="All Flex Rules" package="" class="Table.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="221" endline="221" begincolumn="64" endcolumn="64" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="All Flex Rules" package="" class="Table.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="253" endline="253" begincolumn="37" endcolumn="37" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="All Flex Rules" package="" class="Table.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="257" endline="257" begincolumn="36" endcolumn="36" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="All Flex Rules" package="" class="Table.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="14" endline="14" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.asdocs.ClassAsDocMissing" ruleset="All Flex Rules" package="" class="Table.as" externalInfoUrl="" priority="3">This class ({0}) should be documented with AsDocs.. </violation>
      <violation beginline="14" endline="14" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.sizing.TooManyFunction" ruleset="All Flex Rules" package="" class="Table.as" externalInfoUrl="" priority="3">Too many methods detected (10 maximum, but 11 actually). A class with too many methods is probably a good suspect for refactoring, in order to reduce its complexity and find a way to have more fine grained objects</violation>
      <violation beginline="14" endline="14" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.sizing.TooManyFields" ruleset="All Flex Rules" package="" class="Table.as" externalInfoUrl="" priority="3">Too many field detected (5 maximum, but 11 actually). Classes that have too many fields could be redesigned to have fewer fields, possibly  through some nested object grouping of some of the information.  For example, a class with  city/state/zipcode fields could instead have one Address field</violation>
      <violation beginline="62" endline="62" begincolumn="30" endcolumn="30" rule="adobe.ac.pmd.rules.sizing.TooManyParameters" ruleset="All Flex Rules" package="" class="Table.as" externalInfoUrl="" priority="3">Long parameter list detected (4 maximum, but 5 actually). Long parameter lists can indicate that a new object should be created to wrap the numerous parameters.  Basically, try to group the parameters together</violation>
      <violation beginline="79" endline="79" begincolumn="19" endcolumn="19" rule="adobe.ac.pmd.rules.sizing.TooLongFunction" ruleset="All Flex Rules" package="" class="Table.as" externalInfoUrl="" priority="3">This function is far too long (20 maximum, but 39 actually). Violations of this rule usually indicate that the method has too much responsibility. Try to reduce the method size by creating helper methods and removing any copy/pasted code</violation>
      <violation beginline="298" endline="298" begincolumn="20" endcolumn="20" rule="adobe.ac.pmd.rules.sizing.TooLongFunction" ruleset="All Flex Rules" package="" class="Table.as" externalInfoUrl="" priority="3">This function is far too long (20 maximum, but 25 actually). Violations of this rule usually indicate that the method has too much responsibility. Try to reduce the method size by creating helper methods and removing any copy/pasted code</violation>
   </file>
   <file name="C:/Users/Rintarou/Documents/SWFTest/src/VShapeWithStyle.as">
      <violation beginline="7" endline="7" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="All Flex Rules" package="" class="VShapeWithStyle.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="8" endline="8" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="All Flex Rules" package="" class="VShapeWithStyle.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="9" endline="9" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="All Flex Rules" package="" class="VShapeWithStyle.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="16" endline="16" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.unused.UnusedField" ruleset="All Flex Rules" package="" class="VShapeWithStyle.as" externalInfoUrl="" priority="1">This private attribute (fillstyle0) does not seem to be used. </violation>
      <violation beginline="16" endline="16" begincolumn="36" endcolumn="36" rule="adobe.ac.pmd.rules.unused.UnusedField" ruleset="All Flex Rules" package="" class="VShapeWithStyle.as" externalInfoUrl="" priority="1">This private attribute (fillstyle1) does not seem to be used. </violation>
      <violation beginline="20" endline="20" begincolumn="28" endcolumn="28" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="All Flex Rules" package="" class="VShapeWithStyle.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="45" endline="45" begincolumn="18" endcolumn="18" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="All Flex Rules" package="" class="VShapeWithStyle.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="86" endline="86" begincolumn="24" endcolumn="24" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="All Flex Rules" package="" class="VShapeWithStyle.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="91" endline="91" begincolumn="18" endcolumn="18" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="All Flex Rules" package="" class="VShapeWithStyle.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="158" endline="158" begincolumn="18" endcolumn="18" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="All Flex Rules" package="" class="VShapeWithStyle.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="245" endline="245" begincolumn="33" endcolumn="33" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="All Flex Rules" package="" class="VShapeWithStyle.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="281" endline="281" begincolumn="37" endcolumn="37" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="All Flex Rules" package="" class="VShapeWithStyle.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="297" endline="297" begincolumn="35" endcolumn="35" rule="adobe.ac.pmd.rules.maintanability.forbiddentypes.UseObjectType" ruleset="All Flex Rules" package="" class="VShapeWithStyle.as" externalInfoUrl="" priority="1">Do not use Object class. It is a bad practice to use the dynamic class Object. Prefer using strongly typed object, or marker interface in order to avoid silent compilation errors while refactoring</violation>
      <violation beginline="5" endline="5" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.asdocs.ClassAsDocMissing" ruleset="All Flex Rules" package="" class="VShapeWithStyle.as" externalInfoUrl="" priority="3">This class ({0}) should be documented with AsDocs.. </violation>
      <violation beginline="5" endline="5" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.sizing.TooManyFields" ruleset="All Flex Rules" package="" class="VShapeWithStyle.as" externalInfoUrl="" priority="3">Too many field detected (5 maximum, but 9 actually). Classes that have too many fields could be redesigned to have fewer fields, possibly  through some nested object grouping of some of the information.  For example, a class with  city/state/zipcode fields could instead have one Address field</violation>
      <violation beginline="16" endline="16" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.naming.VariableNameEndingWithNumeric" ruleset="All Flex Rules" package="" class="VShapeWithStyle.as" externalInfoUrl="" priority="3">Using digits at the end of a symbol does not help understanging the meaning of it. (fillstyle1). </violation>
      <violation beginline="20" endline="20" begincolumn="12" endcolumn="12" rule="adobe.ac.pmd.rules.performance.HeavyConstructor" ruleset="All Flex Rules" package="" class="VShapeWithStyle.as" externalInfoUrl="" priority="3">Constructor must be as lightweight as possible. No control statement allowed, whereas a cyclomatic complexe of 3 has been detected. The Just-In-Time compiler does not compile constructors. Make them as lightweight as possible, or move the complexity of the code to a method called by the constructor. Then the complexity will be compiled by the JIT</violation>
      <violation beginline="43" endline="43" begincolumn="20" endcolumn="20" rule="adobe.ac.pmd.rules.performance.CyclomaticComplexity" ruleset="All Flex Rules" package="" class="VShapeWithStyle.as" externalInfoUrl="" priority="3">This method is too complex. Maximum complexity is 15, but its cyclomatic complexity was 23. </violation>
      <violation beginline="43" endline="43" begincolumn="20" endcolumn="20" rule="adobe.ac.pmd.rules.sizing.TooLongFunction" ruleset="All Flex Rules" package="" class="VShapeWithStyle.as" externalInfoUrl="" priority="3">This function is far too long (20 maximum, but 35 actually). Violations of this rule usually indicate that the method has too much responsibility. Try to reduce the method size by creating helper methods and removing any copy/pasted code</violation>
      <violation beginline="157" endline="157" begincolumn="20" endcolumn="20" rule="adobe.ac.pmd.rules.sizing.TooLongFunction" ruleset="All Flex Rules" package="" class="VShapeWithStyle.as" externalInfoUrl="" priority="3">This function is far too long (20 maximum, but 33 actually). Violations of this rule usually indicate that the method has too much responsibility. Try to reduce the method size by creating helper methods and removing any copy/pasted code</violation>
      <violation beginline="212" endline="212" begincolumn="15" endcolumn="15" rule="adobe.ac.pmd.rules.performance.DeeplyNestedIf" ruleset="All Flex Rules" package="" class="VShapeWithStyle.as" externalInfoUrl="" priority="3">Nested if statements are not a good design. </violation>
      <violation beginline="254" endline="254" begincolumn="7" endcolumn="7" rule="adobe.ac.pmd.rules.empty.EmptyIfStmt" ruleset="All Flex Rules" package="" class="VShapeWithStyle.as" externalInfoUrl="" priority="3">No statements in this if statement. Empty If Statement finds instances where a condition is checked but nothing is done about it</violation>
   </file>
</pmd>

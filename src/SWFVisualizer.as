package {	import com.greensock.*;	import com.greensock.data.TweenLiteVars;	import com.greensock.easing.*;	import fl.transitions.Zoom;	import flash.utils.Timer;		import flash.display.*;	import flash.events.*;	import flash.geom.*;	import flash.text.TextField;	import org.hasseg.externalMouseWheel.*;		import fl.motion.MatrixTransformer;	import flash.ui.Keyboard;		import ui.*;	import event.*;	import visual.*;		/**	 * SWFVisualizer is the document class of the swf.	 * <p>=== MVC Model ===</p>	 * <p>View : (ui/) Toolbox, JSONBox, ToolTip, InfoBox, (visual/) Table, Cell, Anchor, ConnPath, LayoutContainer</p>	 * <p>Controller : SWFVisualizer</p>	 * <p>Model : JSONVisualizer, Global</p>	 */	public class SWFVisualizer extends MovieClip {						private var dragX:int, dragY:int;		private var dragTarget:DisplayObject;				// model		private var jsonViewer:JSONVisualizer;				// ui		private var toolbox:ToolBox;		private var jsonBox:JSONBox;		private var infoBox:InfoBox;		private var toolTip:ToolTip;				// utility		private var _mwSupport:ExternalMouseWheelSupport;				private var zoomCache:ZoomCache;				// remember last focused Table and/or cell for trace into/back.		private var focusedTable:Table, focusedCell:Cell;				public function SWFVisualizer() {						addEventListener(Event.ADDED_TO_STAGE, init);					}					private function init(e:Event):void {			/*			var background:Sprite = new Sprite();			var matrix:Matrix = new Matrix();			matrix.createGradientBox(1920, 768, Math.PI / 2);			background.graphics.beginGradientFill(GradientType.LINEAR, [0x000000, 0x666666], [1, 1], [127, 255], matrix);			background.graphics.drawRect(0, 0, 1920, 768);			background.graphics.endFill();			background.x = (1024 - 1920) >> 2;			addChild(background);			*/			jsonViewer = new JSONVisualizer();			jsonViewer.addEventListener(JSONVisualizer.JSON_DECODE_COMPLETE, infoUpdate);			jsonViewer.addEventListener(Table.TABLE_OVER, showToolTip);			jsonViewer.addEventListener(Table.TABLE_OUT, hideToolTip);			jsonViewer.addEventListener(MouseEvent.MOUSE_OVER, setFocusedCell);			jsonViewer.addEventListener(MouseEvent.MOUSE_OUT, setFocusedCell);			jsonViewer.addEventListener(AlertEvent.MESSAGE, alert);			addChild(jsonViewer);						zoomCache = new ZoomCache();			addChild(zoomCache);						// config box			toolbox = new ToolBox();			addChild(toolbox);			setChildIndex(toolbox, numChildren - 1);			toolbox.addEventListener(ToolBox.LOAD_URL, loadURL);			toolbox.addEventListener(ToolBox.UPLOAD_SWF, uploadSWF);			toolbox.addEventListener(AlertEvent.MESSAGE, alert);			toolbox.popoff();						// json input box			jsonBox = new JSONBox();			addChild(jsonBox);			jsonBox.addEventListener(JSONBox.LOAD_JSON, loadJSON);			jsonBox.addEventListener(AlertEvent.MESSAGE, alert);			jsonBox.popoff();									// info bar			infoBox = new InfoBox();			addChild(infoBox);						// tool tip			toolTip = new ToolTip();			addChild(toolTip); 						// mouse drag handling			stage.addEventListener(MouseEvent.MOUSE_DOWN, mDown);			stage.addEventListener(MouseEvent.MOUSE_UP, mUp);						// scaling for mouse wheel			stage.addEventListener(MouseEvent.MOUSE_WHEEL, onScale);			// track by keyboard			stage.addEventListener(KeyboardEvent.KEY_DOWN, track);						// setup stage scaling mode			stage.align = StageAlign.TOP_LEFT;			stage.scaleMode = StageScaleMode.NO_SCALE;						// patch for Mac OS Mouse wheel 			_mwSupport = ExternalMouseWheelSupport.getInstance(stage);						jsonViewer.loadURL();					}				private function updatePosition():void {			infoBox.updatePositionText(jsonViewer.container.x, jsonViewer.container.y);		}				private function Zoom(scale:Number):void {			var updated_scale:Number = zoomCache.Zoom(jsonViewer.container, scale);			infoBox.updateZoomText(updated_scale);		}				/**		 * Handle MOUSE_OVER and MOUSE_OUT bubble events of SWFViewer on the focused Cell in order to remember the focused cell.		 * @param	e MOUSE_OVER or MOUSE_OUT events		 */		private function setFocusedCell(e:MouseEvent):void {			if (e.target is Cell) {				if (e.type == MouseEvent.MOUSE_OVER) {					focusedCell = e.target as Cell;				} else {					focusedCell = null;				}			}		}				/**		 * Handler LEFT, RIGHT, UP and DOWN key events of the stage.		 * @param	e KeyboardEvent		 */		private function track(e:KeyboardEvent):void {			if (focusedTable && (e.keyCode == Keyboard.LEFT)) {				focusedTable.dispatchTrackBackEvent();			}			if (focusedCell && (e.keyCode == Keyboard.RIGHT)) {				focusedCell.dispatchEvent(new Event(MouseEvent.CLICK));			}			if (e.keyCode == Keyboard.UP) {				Zoom(1.1);			}			if (e.keyCode == Keyboard.DOWN) {				Zoom(0.9);			}		}				//////////////////////////////////////////////////////////		//  Model Event Handlers 		//////////////////////////////////////////////////////////				private function infoUpdate(e:Event):void {						infoBox.updateNumOfObject(jsonViewer.numOfObjects);			infoBox.updateNumOfConnection(jsonViewer.numOfConnections);			infoBox.updateNumOfTag(jsonViewer.numOfTags);			infoBox.updateZoomText(jsonViewer.container.scaleX);			toolbox.popoff();		}				//////////////////////////////////////////////////////////		//  UI(View) Event Handlers 		//////////////////////////////////////////////////////////				private function alert(e:AlertEvent):void {			toolTip.show (stage.mouseX + 20, stage.mouseY - 60, e.message);		}				// Table::TABLE_OVER Event Handler		private function showToolTip(e:Event):void {			// e.target must be Table.			focusedTable = e.target as Table; // remember the focused table						if (jsonViewer.container.scaleX < Global.config.tooltip.showTime) {				toolTip.show(stage.mouseX + 20, stage.mouseY - 60, focusedTable.header);			}		}				// Table::TABLE_OUT Event Handler		private function hideToolTip(e:Event):void {						focusedTable = null;			toolTip.hide();		}				// ToolBox::UPLOADE_SWF Event Handler		private function uploadSWF(e:Event):void {						jsonViewer.uploadSWF();		}				// ToolBox::LOAD_URL Event Handler		private function loadURL(e:Event):void {			jsonViewer.loadURL (toolbox.URL);		}				// JSONBox::LOAD_JSON Event Handler		private function loadJSON(e:Event):void {			jsonViewer.loadJSON (jsonBox.JSONString);		}				////////////// Drag Event Handler //////////////		private function mDown(e:MouseEvent):void {						if (toolbox.contains(DisplayObject(e.target)) ||			    jsonBox.contains(DisplayObject(e.target))) {				dragTarget = null;			} else {				dragTarget = jsonViewer.container;			}						dragX = e.stageX;			dragY = e.stageY;					}				private function mUp(e:MouseEvent):void {			var p:Point = new Point(e.stageX - dragX, e.stageY - dragY);			if (p.length < 5) {				return;			}			// Drag Tween			if (dragTarget) {				var targetX:Number = dragTarget.x + p.x;				var targetY:Number = dragTarget.y + p.y;				TweenLite.to(jsonViewer.container, 0.6, { x: targetX, y: targetY, ease:Back.easeOut, onComplete: updatePosition } );							}					}							////////////// Zooming Event Handler //////////////		private function onScale(e:MouseEvent):void {						if (toolbox.contains(DisplayObject(e.target)) || jsonBox.contains(DisplayObject(e.target))) {					return;			}							var zoomScale:Number = 1 + (e.delta / 30);			Zoom(zoomScale);		}			}}
package ui{	//import fl.transitions.*;	import fl.transitions.easing.*;	import flash.display.*;	import flash.events.*;	import flash.filters.*;	import flash.text.*;		import com.greensock.*;		import event.AlertEvent;		/**	 * Tool box include the URL input box, full screen switch button, file upload button.	 */	public class ToolBox extends Sprite {				// UI Event Type		public static const UPLOAD_SWF:String = "UPLOAD_SWF";		public static const LOAD_URL:String   = "LOAD_URL";				private var popped:Boolean = false;				private var shadowFilter:DropShadowFilter;				private var swfURL:TextField;				[Embed(source='../graphics/arrow_down_16x16.png')]		private var ClosePNG:Class;				[Embed(source='../graphics/arrow_up_16x16.png')]		private var OpenPNG:Class;		[Embed(source='../graphics/check_16x13.png')]		private var AcceptPNG:Class;				[Embed(source='../graphics/fullscreen_alt_16x16.png')]		private var FullScreenPNG:Class;				[Embed(source='../graphics/fullscreen_exit_alt_16x16.png')]		private var NormalScreenPNG:Class;				[Embed(source = '../graphics/folder_stroke_16x16.png')]		private var UploadPNG:Class;				[Embed(source = '../graphics/checkbox_yes.png')]				private var CheckBoxYesPNG:Class;				[Embed(source='../graphics/checkbox_no.png')]		private var CheckBoxNoPNG:Class;						private var loadBtn:Sprite, popBtn:Sprite, switchBtn:Sprite, uploadBtn:Sprite, shapeRecordCheckbox:Sprite;		private var acceptBmp:Bitmap, closeBmp:Bitmap, openBmp:Bitmap, uploadBmp:Bitmap, checkedBmp:Bitmap, uncheckedBmp:Bitmap;		private var fullBmp:Bitmap, normalBmp:Bitmap;				function ToolBox() {						addEventListener(Event.ADDED_TO_STAGE, init);			shadowFilter = new DropShadowFilter(5, -45);			filters = [shadowFilter];		}						private function init(e:Event):void {						var _config:Object = Global.config.toolbox;						// draw background			graphics.beginFill(_config.titleBackgroundColor);			graphics.drawRect(0, -2, _config.width, 21);			graphics.beginFill(_config.bodyBackgroundColor);						graphics.drawRect(0, 19, _config.width, _config.height);			graphics.endFill();						x = 10;						// Bmp init			closeBmp 	= new ClosePNG();			openBmp  	= new OpenPNG();			fullBmp  	= new FullScreenPNG();			normalBmp 	= new NormalScreenPNG();			acceptBmp   = new AcceptPNG();			uploadBmp	= new UploadPNG();			checkedBmp  = new CheckBoxYesPNG();			uncheckedBmp = new CheckBoxNoPNG();						popBtn = new Sprite();			UIUtil.drawBmp(popBtn, closeBmp);			popBtn.x = _config.width - 20;			popBtn.y = 0;						switchBtn = new Sprite();			UIUtil.drawBmp(switchBtn, fullBmp);			switchBtn.x = popBtn.x - switchBtn.width - 5;			switchBtn.y = 0;									uploadBtn = new Sprite();			UIUtil.drawBmp(uploadBtn, uploadBmp);			uploadBtn.x = switchBtn.x - uploadBtn.width - 5;			uploadBtn.y = 0;									loadBtn = new Sprite();			UIUtil.drawBmp(loadBtn, acceptBmp);			loadBtn.x = 190;			loadBtn.y = 75;						shapeRecordCheckbox = new Sprite();			UIUtil.drawBmp(shapeRecordCheckbox, uncheckedBmp);			shapeRecordCheckbox.x = 170;			shapeRecordCheckbox.y = 26;						var showShapeRecordText:TextField = UIUtil.createLabel(5, 22, "Show ShapeRecord : ");									swfURL = UIUtil.createLabel(5, 70, "", TextFieldType.INPUT);			swfURL.width  = 170;			swfURL.height = 20;			swfURL.border = true;			swfURL.borderColor = 0x666666;						var labelText:TextField = UIUtil.createLabel(5, 50, "SWF URL : ");						var labelText2:TextField = UIUtil.createLabel(5, 110, "by Nothing but the Truth");						var tf:TextFormat = labelText2.getTextFormat();			tf.url = "http://rintarou.dyndns.org";			tf.italic = true;			labelText2.setTextFormat(tf);						var labelText3:TextField = UIUtil.createLabel(5, 0, _config.title);			labelText3.y = -1;			labelText3.textColor = _config.titleColor;						loadBtn.addEventListener(MouseEvent.CLICK, loadURL);			popBtn.addEventListener(MouseEvent.CLICK, triggerSelf);			switchBtn.addEventListener(MouseEvent.CLICK, switchFullscreen);			uploadBtn.addEventListener(MouseEvent.CLICK, dispatchUploadEvent);			shapeRecordCheckbox.addEventListener(MouseEvent.CLICK, switchShapeRecordFlag);						swfURL.addEventListener(MouseEvent.CLICK, selectAll);			swfURL.addEventListener(KeyboardEvent.KEY_DOWN, onEnterKey);						addChild(loadBtn);			addChild(popBtn);			addChild(switchBtn);			addChild(uploadBtn);			addChild(shapeRecordCheckbox);			addChild(showShapeRecordText);			addChild(labelText);			addChild(labelText2);			addChild(labelText3);			addChild(swfURL);						addEventListener(MouseEvent.MOUSE_OVER, triggerAlpha);			addEventListener(MouseEvent.MOUSE_OUT, triggerAlpha);			// handle resize event			stage.addEventListener(Event.RESIZE, resizeHandler);		}				private function switchShapeRecordFlag(event:Event):void {			Global.runtime.showShapeRecord = !Global.runtime.showShapeRecord;			if (Global.runtime.showShapeRecord) {				UIUtil.drawBmp(shapeRecordCheckbox, checkedBmp);			} else {				UIUtil.drawBmp(shapeRecordCheckbox, uncheckedBmp);			}		}				private function dispatchUploadEvent(event:Event):void {			dispatchEvent(new Event(UPLOAD_SWF));		}				private function onEnterKey(e:KeyboardEvent):void {			if (e.keyCode == 13) { // onEnter				loadURL(e);			}			if ((stage.displayState != StageDisplayState.NORMAL) && (!e.ctrlKey)) {				dispatchEvent(new AlertEvent("Only copy and paste supported in full screen mode!"));			}		}				private function selectAll(e:Event):void {			swfURL.setSelection(0, swfURL.text.length);		}		private function loadURL(e:Event):void {			popoff();			var l:Event = new Event(LOAD_URL);			dispatchEvent(l);		}						private function switchFullscreen(e:Event):void {			if (stage.displayState == StageDisplayState.NORMAL) {				stage.displayState = StageDisplayState.FULL_SCREEN_INTERACTIVE;			} else {				stage.displayState = StageDisplayState.NORMAL;			}		}				private function triggerSelf(e:Event):void {			if (popped)				popup();			else				popoff();		}				private function triggerAlpha(e:MouseEvent):void {			if (popped) {				if (e.type == MouseEvent.MOUSE_OVER) {					alpha = 1;				}				if (e.type == MouseEvent.MOUSE_OUT) {					alpha = 0.7;				}			}		}				/**		 * Return URL string of the input box.		 */		public function get URL():String {			return swfURL.text;		}				/**		 * Pop up		 */		public function popoff():void {						// drawing icon			UIUtil.drawBmp(popBtn, openBmp);			popped = true;			alpha = 0.7;			var cornerY:Number = stage.stageHeight - popBtn.height - 2;			TweenLite.to(this, 0.4, { y: cornerY, ease:Strong.easeOut } );		}				/**		 * Pop off		 */		public function popup():void {						// drawing icon			UIUtil.drawBmp(popBtn, closeBmp);						popped = false;			alpha = 1;			var centerY:Number = stage.stageHeight - height - 2;			TweenLite.to(this, 0.4, { y: centerY, ease:Strong.easeOut } );		}				private function resizeHandler(e:Event):void {			popoff();			if (stage.displayState == StageDisplayState.NORMAL) {				UIUtil.drawBmp(switchBtn, fullBmp);			} else {				UIUtil.drawBmp(switchBtn, normalBmp);			}		}	}}
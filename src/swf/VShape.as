package swf{	import flash.display.*;	import flash.events.Event;	import flash.events.TimerEvent;	import flash.geom.*;	import flash.text.TextField;	import flash.utils.Timer;		/**	 * VShape will decode the SHAPE object and draw the edges with arrow.	 */	public class VShape extends Shape {				private static const JSON_OBJECT_TYPE_INFO:String = Global.config.system.JSON_OBJECT_TYPE_INFO;	// used by swfparser so far, as the name of the json object.				private var ShapeWithoutStyle:Object;		private var shapeRecords:Array;				private var drawingRecords:Array;		private var drawingTimer:Timer;				private var penX:Number = 0, penY:Number = 0;				private var pathNo:uint = 0;				/**		 * @param	shape SHAPE JSON object		 */		function VShape(shape:Object) {						drawingTimer = new Timer(100, 0);						// attach the SHAPE object			ShapeWithoutStyle = shape;						shapeRecords = ShapeWithoutStyle["ShapeRecords"];						draw();		}				/**		 * Progressively redraw the shape.		 */		public function progressiveDraw():void {			if (drawingTimer.running) {				return;			}			drawingTimer.stop();			graphics.clear();			graphics.lineStyle(1, 0xffffff);						drawingRecords = null;			drawingRecords = new Array();			drawingRecords = drawingRecords.concat(shapeRecords);						drawingTimer.addEventListener(TimerEvent.TIMER, onTimerHandler);			drawingTimer.start();					}				private function onTimerHandler(e:Event):void {			var record:Object = drawingRecords.shift();			if (record) {				drawRecord(record);			} else {				graphics.endFill();				drawingTimer.stop();			}		}				private function styleChanged(styleChangedRecord:Object):void {			if (styleChangedRecord["MoveDeltaX"] != null) {				penX = styleChangedRecord["MoveDeltaX"];				penY = styleChangedRecord["MoveDeltaY"];				graphics.moveTo(penX / 20, penY / 20);				graphics.drawRect(penX / 20, penY / 20, 4, 4);			}		}				private function drawStraightEdge(straightEdgeRecord:Object):void {			var deltaX:Number = 0, deltaY:Number = 0;						if (straightEdgeRecord["DeltaX"])				deltaX = straightEdgeRecord["DeltaX"];							if (straightEdgeRecord["DeltaY"])				deltaY = straightEdgeRecord["DeltaY"];							var edge:VEdge = new VEdge();			edge.asLine(penX, penY, penX + deltaX, penY + deltaY);			edge.draw(graphics, true);			edge.drawArrow(graphics);						penX += deltaX;			penY += deltaY;					}				private function drawCurvedEdge(curvedEdgeRecord:Object):void {						var cpX:Number, cpY:Number, anchorX:Number, anchorY:Number;						graphics.moveTo(penX/20, penY/20);						cpX = penX + curvedEdgeRecord["ControlDeltaX"];			cpY = penY + curvedEdgeRecord["ControlDeltaY"];						anchorX = cpX + curvedEdgeRecord["AnchorDeltaX"];			anchorY = cpY + curvedEdgeRecord["AnchorDeltaY"];						var edge:VEdge = new VEdge();			edge.asCurve (penX, penY, cpX, cpY, anchorX, anchorY);			edge.draw(graphics, true);			edge.drawArrow(graphics);						penX = anchorX;			penY = anchorY;		}				private function drawRecord(record:Object):void {						if (record[JSON_OBJECT_TYPE_INFO] == "STYLECHANGERECORD") {				styleChanged(record);			}			if (record[JSON_OBJECT_TYPE_INFO] == "STRAIGHTEDGERECORD") {				drawStraightEdge(record);			}							if (record[JSON_OBJECT_TYPE_INFO] == "CURVEDEDGERECORD") {				drawCurvedEdge(record);			}		}				private function draw():void {			graphics.lineStyle(1, 0xffffff);			for (var i:uint = 0; i < shapeRecords.length; i++) {				if (shapeRecords[i][JSON_OBJECT_TYPE_INFO] == "STYLECHANGERECORD") {					styleChanged(shapeRecords[i]);				}								if (shapeRecords[i][JSON_OBJECT_TYPE_INFO] == "STRAIGHTEDGERECORD") {					drawStraightEdge(shapeRecords[i]);				}								if (shapeRecords[i][JSON_OBJECT_TYPE_INFO] == "CURVEDEDGERECORD") {					drawCurvedEdge(shapeRecords[i]);				}			}			graphics.endFill();		}	}}
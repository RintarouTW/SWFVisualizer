package visual{	import fl.transitions.*;	import fl.transitions.easing.*;	import flash.display.*;	import flash.events.*;	import flash.filters.*;	import flash.geom.Point;	import com.greensock.*;	import com.greensock.easing.*;		/**	 * ConnPath is the drawer to draw the links between anchors in the container.	 */	public class ConnPath {		private var _config:Object      = Global.config.table.normal.link;		// default setting		private var _lineThickness:uint = _config.lineThickness;			    // thickness of lineStyle		private var _lineColor:uint     = _config.lineColor; 					// default color of lineStyle				private var anchor1:Anchor, anchor2:Anchor; 							// anchor1 is the left point of the path, anchor2 is the right point of the path.		private var graphics:Graphics;		private var canvas:Sprite;				/**		 * 		 * @param	a1	anchor to the table and set to the cell's right middle position.		 * @param	a2	anchor to the linked table which represent the content of the cell indicated by the a1.		 * @param	setting style setting object, if set will override the default style setting.		 */		function ConnPath (a1:Anchor, a2:Anchor, setting:Object = null) {			if (a1 && a2) {				anchor1 = a1;				anchor2 = a2;				anchor1.setPath(this);				anchor2.setPath(this);								anchor1.target.addEventListener(MouseEvent.ROLL_OVER, anchor1Over);				anchor1.target.addEventListener(MouseEvent.ROLL_OUT, anchor1Out);				anchor1.cell.addEventListener(MouseEvent.CLICK, trackInto);								anchor2.target.addEventListener(MouseEvent.ROLL_OVER, anchor1Over);				anchor2.target.addEventListener(MouseEvent.ROLL_OUT, anchor1Out);				anchor2.target.addEventListener(Table.TRACK_BACK, trackBack);								if (setting) {					_config   = setting;					_lineColor = _config.lineColor;				}								//draw();				//visible = false;			}		}				/**		 * Set the drawable object(Sprite) to the ConnPath.		 * @param	target The drawable object that owns the graphics to be drawn by this ConnPath.		 */		public function setCanvas(target:Sprite):void {			canvas = target;			graphics = target.graphics;			draw();		}						/**		 * Redraw the line between anchors on the canvas's graphics.		 */		public function draw():void {			//graphics.clear();						// draw line between anchor1 and anchor2			graphics.lineStyle(_lineThickness, _lineColor);			graphics.moveTo(anchor1.x, anchor1.y);			graphics.lineTo(anchor2.x, anchor2.y);			graphics.endFill();						/*			var p1X:Number, p1Y:Number, p2X:Number, p2Y:Number;							p1X = anchor1.x;			p1Y = anchor1.y;							p2X = anchor2.x;			p2Y = anchor2.y;												var interPX:Number = (p1X + p2X) >> 1;			var interPY:Number = (p1Y + p2Y) >> 1;							graphics.lineStyle(_lineThickness, _lineColor);			graphics.moveTo(p1X, p1Y);			graphics.curveTo(interPX, p1Y, interPX, interPY);			graphics.curveTo(interPX, p2Y, p2X, p2Y);			graphics.endFill();			*/		}						private function trackInto(e:Event):void {			var table:Table = e.target.parent.parent;			var finalX:int = canvas.x - (anchor2.x - (table.x + table.mouseX) + 20) * canvas.scaleX;			var finalY:int = canvas.y - (anchor2.y - (table.y + table.mouseY)) * canvas.scaleY;			TweenLite.to (canvas, 0.3, { x:finalX, y:finalY } );		}				// support track back function.		private function trackBack(e:Event):void {			var table:Table = e.target as Table;			var finalX:int = canvas.x + ((table.x + table.mouseX) - anchor1.x + 20) * canvas.scaleX;			var finalY:int = canvas.y + ((table.y + table.mouseY) - anchor1.y) * canvas.scaleY;						TweenLite.to (canvas, 0.3, { x:finalX, y:finalY } );		}						private function anchor1Over(e:MouseEvent):void {			//visible = true; 			_lineColor = _config.activatedLineColor;			draw();		}				private function anchor1Out(e:MouseEvent):void {			//visible = false;			_lineColor = _config.lineColor;			draw();		}			}}
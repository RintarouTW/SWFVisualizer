package visual{	import flash.display.*;	import flash.events.*;	/**	 * Anchor will remember the position of the target.	 * Watch the target's size changed events and then ask the subscriber (ConnPath) to redraw itself.	 * @author Rintarou Chou	 */	public class Anchor extends EventDispatcher {				private var myTarget:DisplayObject; // myTarget is Table.		private var pointX:int, pointY:int;		private var myPath:ConnPath;		private var myCell:Cell;				/**		 * @param target    The target of the anchor.		 * @param position  The position object holds the {x:int, y:int} information of the anchor in target's cordinate space.		 * @param cell      The cell of this anchor linked with.		 */		function Anchor(target:DisplayObject, position:Object, cell:Cell = null) {			myTarget = target; // target to table only. so far..			pointX = position.x;			pointY = position.y;			myTarget.addEventListener(Table.POSITION_CHANGED, redrawPath);			myTarget.addEventListener(Table.SCALE_CHANGED, redrawPath);			myTarget.addEventListener(Table.WIDTH_CHANGED, widthChangedHandler);			if (cell) {				myCell = cell;				myCell.setAnchor(this);			}		}		/**		 * setPath() is called by ConnPath which is interested in the position changed event of the anchor.		 * @param	path ConnPath that own this anchor.		 */		public function setPath(path:ConnPath):void {			myPath = path;		}				/**		 * The target DisplayObject the anchor linked to.		 */		public function get target() : DisplayObject {			return myTarget;		}				/**		 * Cell DisplayObject related with the anchor. ConnPath need know which cell is indicated by the anchor.		 */		public function get cell() : DisplayObject {			return myCell;		}				/**		 * Return the x position in container's cordination.		 */		public function get x() : int {			return myTarget.x + (pointX * myTarget.scaleX);		}				/**		 * Return the y position in container's cordination.		 */				public function get y() : int {			return myTarget.y + (pointY * myTarget.scaleY);		}						/**		 * Event Handler of Table.POSITION_CHANGED and Table.SCALE_CHANGED events		 * @param	e Table.POSITION_CHANGED or Table.SCALE_CHANGED event		 */		private function redrawPath(e:Event):void {			if (myPath) {				myPath.draw(); // redraw path			}		}				/**		 * Event handler of Table.WIDTH_CHANGED event.		 * @param	e Table.WIDTH_CHANGED event		 */		private function widthChangedHandler(e:Event):void {			pointX = Table(myTarget).tableWidth;			if (myPath) {				myPath.draw();			}		}			}}
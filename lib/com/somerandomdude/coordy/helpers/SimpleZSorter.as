package com.somerandomdude.coordy.helpers{	import flash.display.DisplayObject;	import flash.display.DisplayObjectContainer;		import com.somerandomdude.coordy.layouts.threedee.ILayout3d;	import flash.geom.Matrix3D;		/**	 * @author Ralph Hauwert / UnitZeroOne (Altered to fit Coordy library by P.J. Onori)	 */	public class SimpleZSorter	{				/**		 * SimpleZSorter.sortClips(container);		 * 		 * @param the layout object containing the nodes to be sorted according to their Z Depth.		 */		 		 private static var _parent:DisplayObjectContainer;		 		public static function sortLayout(target:DisplayObjectContainer, layout : ILayout3d) : void		{			//Check if something was passed.			if(layout != null){				//Check if this displayobjectcontainer has more then 1 child.				var nc:int = layout.size;				var nodes:Array = layout.nodes;				if(nc > 1){										var index:int = 0;					var vo : SimpleZSortVO;					var displayObject:DisplayObject;					var transformedMatrix : Matrix3D;					var mainParent : DisplayObject = traverseParents(target);										//This array we will use to store & sort the objects and the relative screenZ's.					var sortArray : Array = new Array();										//cycle through all the displayobjects.					for(var c:int = 0; c < nc; c++){						if(!nodes[c].link||!nodes[c].link.parent||nodes[c].link.parent!=target) continue;												displayObject = nodes[c].link;																		//This transformed matrix contains the actual transformed Z position.						transformedMatrix = displayObject.transform.getRelativeMatrix3D(mainParent);												//Push this object in the sortarray. [Maybe replace the new for a pool]						sortArray.push(new SimpleZSortVO(displayObject, transformedMatrix.position.z));					}										//Sort the array (Array.sort is still king of speed).					sortArray.sortOn("screenZ", Array.NUMERIC | Array.DESCENDING);					for each(vo in sortArray){						//Change the indices of all objects according to their Z Sorted value.						target.setChildIndex(vo.object, index++);											}										//Let's make sure all ref's are released.					sortArray = null;				}			}else{				throw new Error("No displayobject was passed as an argument");			}		}				/**		 * This traverses the displayobject to the parent.		 */		private static function traverseParents(container : DisplayObject) : DisplayObject		{			//Take the current parent.			if(!container||!container.parent) return null;			var parent : DisplayObject = container.parent;			var lastParent : DisplayObject = parent;			//Iterate until the parent value is null (we've reached the end of this displayobject chain).			while((parent = parent.parent) != null){				lastParent = parent;			}			//Return the "top most" parent.			return lastParent;		}	}}
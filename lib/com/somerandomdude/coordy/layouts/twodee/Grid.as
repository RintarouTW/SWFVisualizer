 /*The MIT LicenseCopyright (c) 2009 P.J. Onori (pj@somerandomdude.com)Permission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the "Software"), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included inall copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS INTHE SOFTWARE.*/  /** * * * @author      P.J. Onori * @version     0.1 * @description * @url  */ package com.somerandomdude.coordy.layouts.twodee {	import com.somerandomdude.coordy.constants.GridLayoutDirection;	import com.somerandomdude.coordy.constants.LayoutType;	import com.somerandomdude.coordy.events.CoordyNodeEvent;	import com.somerandomdude.coordy.nodes.INode;	import com.somerandomdude.coordy.nodes.twodee.GridNode;		import flash.geom.Rectangle;	public class Grid extends Layout2d implements ILayout2d	{		private var _rows:int;		private var _columns:int;		private var _hPadding:Number=0;		private var _yPadding:Number=0;				private var _hDirection:String;		private var _vDirection:String;		private var _maxNodes:int;				/**		 * Accessor for columns property		 *		 * @return	Column length   		 */		public function get columns():uint { return _columns; }				/**		 * Accessor for rows property		 *		 * @return	Row length   		 */		public function get rows():int { return _rows; }				/**		 * Sets horiztonal direction in which nodes are laid out in grid		 * 		 * @see com.somerandomdude.coordy.layouts.GridLayoutDirection		 * 		 * @return Identifier for horiztonal layout direction		 * 		 */					public function get horizonalDirection():String { return _hDirection; }		public function set horizonalDirection(value:String):void		{			this._hDirection=value;			this._updateFunction();		}				/**		 * Sets vertical direction in which nodes are laid out in grid		 * 		 * @see com.somerandomdude.coordy.layouts.GridLayoutDirection		 * 		 * @return Identifier for vertical layout direction		 * 		 */				public function get verticalDirection():String { return _vDirection; }		public function set verticalDirection(value:String):void		{			this._vDirection=value;			this._updateFunction();		}				/**		 * Mutator/accessor for x padding property		 *		 * @return	X padding of grid nodes for layout   		 */		public function get paddingX():Number { return this._hPadding; }		public function set paddingX(value:Number):void		{			this._hPadding=value;			this._updateFunction();		}				/**		 * Mutator/accessor for y padding property		 *		 * @return	Y padding of grid nodes for layout   		 */		public function get paddingY():Number { return this._yPadding; }		public function set paddingY(value:Number):void		{			this._yPadding=value;			this._updateFunction();		}				/**		 * Accessor for node width property		 *		 * @return	Width dimension of layout node   		 */		public function get nodeWidth():Number { return _width/_columns; }				/**		 * Accessor for node height property		 *		 * @return	Height dimension of layout node   		 */		public function get nodeHeight():Number { return _height/_rows; }				/**		 * Distributes nodes in a grid.		 * 		 * @param width				Width of the grid		 * @param height			Height of the grid		 * @param columns			Number of columns in the grid		 * @param rows				Number of rows in the grid		 * @param hPadding			Horizontal padding between columns		 * @param vPadding			Vertical padding between rows		 * @param x					x position of the grid		 * @param y					x position of the grid		 * @param jitterX			Jitter multiplier for the layout's nodes on the x axis		 * @param jitterY			Jitter multiplier for the layout's nodes on the y axis		 * 		 */				public function Grid(width:Number, 							height:Number, 							columns:uint, 							rows:uint, 							hPadding:Number=0, 							vPadding:Number=0, 							x:Number=0, 							y:Number=0, 							jitterX:Number=0, 							jitterY:Number=0):void		{			this._width=width;			this._height=height;			this._rows=rows;			this._columns=columns;			this._maxNodes=_rows*_columns;			this._hPadding=hPadding;			this._yPadding=vPadding;			this._x=x;			this._y=y;			this._jitterX=jitterX;			this._jitterY=jitterY;		}				/**		 * Returns the type of layout in a string format		 * 		 * @see com.somerandomdude.coordy.layouts.LayoutType		 * @return Layout's type		 * 		 */		override public function toString():String { return LayoutType.GRID; }				/**		 * Get cell objects by column index		 *		 * @param  column  cell index of grid		 * @return      an array of cell objects by column index		 * @see         Cell		 */		public function getColumn(column:uint):Array		{			var c:Array = new Array();			for(var i:int=0; i<_rows; i++)			{				c.push(_nodes[(i*_columns)+column]);			}			return c;		}				/**		 * Get cell objects by row index		 *		 * @param  row  row index of grid		 * @return      an array of cell objects by row index		 * @see         Cell		 */		public function getRow(row:uint):Array		{			var c:Array = new Array();			for(var i:int=row*_columns; i<(row*_columns)+_columns; i++)			{				c.push(_nodes[i]);			}			return c;		}				/**		 * Removes cell link of DisplayObject at specified grid coordinates		 *		 * @param  column  column index of grid		 * @param  row  row index of grid		 */		public function removeItemAt(column:uint, row:uint):void		{			this.getNodeFromCoordinates(column, row).link=null;		}				/**		 * Adds cell link of object at specified grid coordinates		 *		 * @param  column  column index of grid		 * @param  row  row index of grid		 * @param  moveToCoordinates  automatically move DisplayObject to corresponding cell's coordinates		 */		public function addItemAt(object:Object, column:uint, row:uint, moveToCoordinates:Boolean=true):INode		{			if(!validateObject(object)) throw new Error('Object does not implement at least one of the following properties: "x", "y", "rotation"');			if(linkExists(object)) return null;			var node:GridNode = this.getNodeFromCoordinates(column, row);			node.link=object;			if(moveToCoordinates)			{				object.x=node.x;				object.y=node.y;			}			return node;		}				/**		 * Returns cell at specified grid coordinates		 *		 * @param  column  column index of grid		 * @param  row  row index of grid		 * @return GridNode object from specified coordinates		 */		public function getNodeFromCoordinates(column:uint, row:uint):GridNode		{			return this._nodes[(row*_columns)+column];		}				/**		 * Adds object to layout in next available position.		 *		 * @param  object  Object to add to layout		 * @param  moveToCoordinates  automatically move DisplayObject to corresponding nodes's coordinates		 * 		 * @return newly created node object containing a link to the object		 */		override public function addNode(object:Object=null, moveToCoordinates:Boolean=true):INode		{						if(object&&!validateObject(object)) throw new Error('Object does not implement at least one of the following properties: "x", "y", "rotation"');			if(object&&linkExists(object)||_size>=_maxNodes) return null;						var d:Rectangle = this.calculateCellSize();			var c:int = _size%_columns;			var r:int = Math.floor(_size/(_maxNodes/_rows));			var node:GridNode = new GridNode(object, c,r,((d.width*c)+(c*_hPadding)+_x),((d.height*r)+(r*_yPadding)+_y));						storeNode(node);						if(object&&moveToCoordinates) object.x=node.x, object.y=node.y;						dispatchEvent(new CoordyNodeEvent(CoordyNodeEvent.ADD, node));						return node;		}				override public function addNodes(count:int):void {}				/**		 * Adds object to layout in next available position <strong>This method is depreceated.</strong>		 *		 * @param  object  Object to add to layout		 * @param  moveToCoordinates  automatically move DisplayObject to corresponding node's coordinates		 * 		 * @return newly created node object containing a link to the object		 */		override public function addToLayout(object:Object, moveToCoordinates:Boolean=true):INode		{			if(!validateObject(object)) throw new Error('Object does not implement at least one of the following properties: "x", "y", "rotation"');			if(object&&linkExists(object)||_size>=_maxNodes) return null;						var d:Rectangle = this.calculateCellSize();			var c:int = _size%_columns;			var r:int = Math.floor(_size/(_maxNodes/_rows));			var node:GridNode = new GridNode(object, c,r,((d.width*c)+(c*_hPadding)+_x),((d.height*r)+(r*_yPadding)+_y));						storeNode(node);			if(moveToCoordinates) object.x=node.x, object.y=node.y;						dispatchEvent(new CoordyNodeEvent(CoordyNodeEvent.ADD, node));						return node;		}				/**		* Clones the current object's properties (does not include links to DisplayObjects)		* 		* @return Grid clone of object		*/		override public function clone():ILayout2d		{			return new Grid(_width, _height, _columns, _rows, paddingX, paddingY, _x, _y, _jitterX, _jitterY);		}				/**		 * Updates the nodes' virtual coordinates. <strong>Note</strong> - this method does not update		 * the actual objects linked to the layout.		 * 		 */			override public function update():void		{			var total:uint = _columns*_rows;			var d:Rectangle = this.calculateCellSize();			var c:uint;			var r:uint;			var node:GridNode;			for(var i:int=0; i<_size; i++)			{				node = this._nodes[i];				if(!node) break;								c = i%_columns;				r = Math.floor(i/(total/_rows));								if(_hDirection==GridLayoutDirection.RIGHT_TO_LEFT) c=(_columns-1)-c;				if(_vDirection==GridLayoutDirection.BOTTOM_TO_TOP) r=(_rows-1)-r;												node.x = ((d.width*c)+(c*_hPadding)+_x);				node.y = ((d.height*r)+(r*_yPadding)+_y);			}		}				/**		 * 		 * @private 		 * 		 */				private function calculateCellSize():Rectangle		{			return new Rectangle(0, 0, (_width-((_columns-1)*_hPadding))/_columns, (_height-((_rows-1)*_yPadding))/_rows);		}	}}